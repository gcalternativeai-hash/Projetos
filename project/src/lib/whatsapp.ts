// src/lib/whatsapp.ts
// Configura√ß√£o do WhatsApp
const WHATSAPP_CONFIG = {
  // N√∫mero de teste (pode ser alterado facilmente)
  phoneNumber: '+5573988199938',
  
  // API de envio (usando wa.me para simplicidade - pode ser substitu√≠da por Twilio, etc.)
  apiUrl: 'https://api.whatsapp.com/send',
  
  // Configura√ß√µes de retry
  maxRetries: 3,
  retryDelay: 2000
};

export interface PedidoWhatsApp {
  nome: string;
  telefone: string;
  itens: string;
  adicionais?: string;
  bebidas?: string;
  valorTotal: number;
  dataPedido: string;
  numeroPedido: string;
  orderType: 'delivery' | 'pickup'; // Tipo de pedido
  valorPago?: number; // Novo campo para o valor que o cliente vai pagar
  subtotal: number; // Adicionado
  deliveryFee: number; // Adicionado
  paymentMethod: string; // Adicionado
  address?: string; // Adicionado para incluir no WhatsApp se for entrega
}

// Fun√ß√£o para formatar a mensagem do WhatsApp
export function formatarMensagemWhatsApp(pedido: PedidoWhatsApp): string {
  const tipoPedidoTexto = pedido.orderType === 'delivery' ? 'ENTREGA' : 'RETIRADA NO LOCAL';
  const enderecoInfo = pedido.orderType === 'delivery' && pedido.address ? `\nüìç *Endere√ßo:* ${pedido.address}` : '';

  let trocoInfo = '';
  if (pedido.valorPago && pedido.valorPago > pedido.valorTotal) {
    const troco = pedido.valorPago - pedido.valorTotal;
    trocoInfo = `\nüíµ *Valor Pago:* R$ ${pedido.valorPago.toFixed(2)}\nüîÑ *Troco Necess√°rio:* R$ ${troco.toFixed(2)}`;
  } else if (pedido.valorPago && pedido.valorPago === pedido.valorTotal) {
    trocoInfo = `\nüíµ *Valor Pago:* R$ ${pedido.valorPago.toFixed(2)} (Valor Exato)`;
  }

  const getPaymentMethodLabel = (method: string): string => {
    const methods: Record<string, string> = {
      pix: 'PIX',
      dinheiro: 'Dinheiro',
      cartao: 'Cart√£o'
    };
    return methods[method] || method.toUpperCase();
  };
  
  const mensagem = `‚ú® *NOVO PEDIDO RECEBIDO!* ‚ú®

---
üìã *Detalhes do Pedido:*
*N√∫mero:* ${pedido.numeroPedido}
*Data/Hora:* ${pedido.dataPedido}
*Tipo:* ${tipoPedidoTexto}

---
üë§ *Dados do Cliente:*
*Nome:* ${pedido.nome}
*Telefone:* ${pedido.telefone}${enderecoInfo}

---
üõí *Itens do Pedido:*
${pedido.itens}
${pedido.adicionais ? `\nüìù *Observa√ß√µes:*\n${pedido.adicionais}` : ''}
${pedido.bebidas ? `\nü•§ *Bebidas:*\n${pedido.bebidas}` : ''}

---
üí∞ *Valores:*
*Subtotal:* R$ ${pedido.subtotal.toFixed(2)}
*Taxa de Entrega:* R$ ${pedido.deliveryFee.toFixed(2)}
*TOTAL:* R$ ${pedido.valorTotal.toFixed(2)}
*Pagamento:* ${getPaymentMethodLabel(pedido.paymentMethod)}${trocoInfo}

---
‚úÖ Pedido confirmado e em produ√ß√£o!`;

  return mensagem;
}

// Fun√ß√£o para enviar mensagem via WhatsApp Web (m√©todo simples)
export function enviarWhatsAppWeb(pedido: PedidoWhatsApp): Promise<{ success: boolean; message: string }> {
  return new Promise((resolve) => {
    try {
      const mensagem = formatarMensagemWhatsApp(pedido);
      const mensagemCodificada = encodeURIComponent(mensagem);
      const numeroLimpo = WHATSAPP_CONFIG.phoneNumber.replace(/\D/g, '');
      
      // URL do WhatsApp Web
      const whatsappUrl = `https://wa.me/${numeroLimpo}?text=${mensagemCodificada}`;
      
     // üöÄ Redirecionamento direto (sem popup)
      window.location.href = whatsappUrl;
      
      resolve({
        success: true,
        message: 'Redirecionado para o WhatsApp com sucesso!'
      });

    } catch (error) {
      console.error('Erro ao abrir WhatsApp:', error);
      resolve({
        success: false,
        message: 'Erro ao abrir WhatsApp. Tente novamente.'
      });
    }
  });
}

// Fun√ß√£o alternativa usando API REST (para implementa√ß√£o futura com Twilio, etc.)
export async function enviarWhatsAppAPI(pedido: PedidoWhatsApp): Promise<{ success: boolean; message: string }> {
  try {
    const mensagem = formatarMensagemWhatsApp(pedido);
    
    // Simula√ß√£o de API REST (substitua pela API real quando dispon√≠vel)
    console.log('üì± Enviando para WhatsApp:', {
      to: WHATSAPP_CONFIG.phoneNumber,
      message: mensagem,
      pedido: pedido.numeroPedido
    });
    
    // Simular delay de API
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // Para demonstra√ß√£o, sempre retorna sucesso
    // Em produ√ß√£o, substitua por chamada real √† API
    return {
      success: true,
      message: `Mensagem enviada para ${WHATSAPP_CONFIG.phoneNumber}`
    };
    
  } catch (error) {
    console.error('Erro na API do WhatsApp:', error);
    return {
      success: false,
      message: 'Erro ao enviar mensagem via API. Tente novamente.'
    };
  }
}

// Fun√ß√£o principal para enviar WhatsApp (com retry)
export async function enviarPedidoWhatsApp(
  pedido: PedidoWhatsApp, 
  metodo: 'web' | 'api' = 'web'
): Promise<{ success: boolean; message: string }> {
  let ultimoErro = '';
  
  for (let tentativa = 1; tentativa <= WHATSAPP_CONFIG.maxRetries; tentativa++) {
    try {
      console.log(`üì± Tentativa ${tentativa} de envio para WhatsApp...`);
      
      const resultado = metodo === 'web' 
        ? await enviarWhatsAppWeb(pedido)
        : await enviarWhatsAppAPI(pedido);
      
      if (resultado.success) {
        console.log('‚úÖ WhatsApp enviado com sucesso!');
        return resultado;
      }
      
      ultimoErro = resultado.message;
      
      // Aguardar antes da pr√≥xima tentativa
      if (tentativa < WHATSAPP_CONFIG.maxRetries) {
        await new Promise(resolve => setTimeout(resolve, WHATSAPP_CONFIG.retryDelay));
      }
      
    } catch (error) {
      ultimoErro = `Erro na tentativa ${tentativa}: ${error}`;
      console.error(ultimoErro);
      
      if (tentativa < WHATSAPP_CONFIG.maxRetries) {
        await new Promise(resolve => setTimeout(resolve, WHATSAPP_CONFIG.retryDelay));
      }
    }
  }
  
  return {
    success: false,
    message: `Falha ap√≥s ${WHATSAPP_CONFIG.maxRetries} tentativas. √öltimo erro: ${ultimoErro}`
  };
}

// Fun√ß√£o para atualizar configura√ß√µes (para o admin)
export function atualizarConfigWhatsApp(novoNumero: string) {
  WHATSAPP_CONFIG.phoneNumber = novoNumero;
  console.log('üì± N√∫mero do WhatsApp atualizado:', novoNumero);
}

// Fun√ß√£o para obter configura√ß√µes atuais
export function obterConfigWhatsApp() {
  return { ...WHATSAPP_CONFIG };
}
